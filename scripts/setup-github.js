#!/usr/bin/env node

const { Octokit } = require('@octokit/rest');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º—ñ—Ç–æ–∫
const labels = [
  // –¢–∏–ø–∏ –∑–∞–¥–∞—á
  { name: 'feature', color: '0366d6', description: 'New features' },
  { name: 'bug', color: 'd73a4a', description: 'Bug reports' },
  { name: 'enhancement', color: 'a2eeef', description: 'Improvements' },
  { name: 'documentation', color: '0075ca', description: 'Documentation updates' },
  
  // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏
  { name: 'priority:low', color: '0e8a16', description: 'Low priority' },
  { name: 'priority:medium', color: 'fbca04', description: 'Medium priority' },
  { name: 'priority:high', color: 'd93f0b', description: 'High priority' },
  { name: 'priority:critical', color: 'b60205', description: 'Critical priority' },
  
  // –†–æ–ª—ñ
  { name: 'role:developer', color: '5319e7', description: 'Developer role' },
  { name: 'role:analyst', color: '1d76db', description: 'Analyst role' },
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
  { name: 'component:gdp', color: 'c2e0c6', description: 'GDP component' },
  { name: 'component:trade', color: 'bfdadc', description: 'Trade component' },
  { name: 'component:country', color: 'd4c5f9', description: 'Country component' },
  { name: 'component:dashboard', color: 'fef2c0', description: 'Dashboard component' },
  { name: 'component:table', color: 'f9d0c4', description: 'Table component' },
  
  // –Ø–∫—ñ—Å—Ç—å
  { name: 'ui/ux', color: 'fef7c0', description: 'UI/UX related' },
  { name: 'performance', color: 'c2e0c6', description: 'Performance related' },
  { name: 'accessibility', color: 'd4c5f9', description: 'Accessibility related' },
  { name: 'security', color: 'ff0000', description: 'Security related' },
  
  // –°—Ç–∞—Ç—É—Å–∏
  { name: 'triage', color: 'fef7c0', description: 'Needs triage' },
  { name: 'help wanted', color: '008672', description: 'Help wanted' },
  { name: 'good first issue', color: '7057ff', description: 'Good for newcomers' },
  { name: 'wontfix', color: 'ffffff', description: 'Will not fix' },
  { name: 'duplicate', color: 'cfd3d7', description: 'Duplicate issue' }
];

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è milestones
const milestones = [
  { title: 'v1.0.0', description: 'Initial release', state: 'open' },
  { title: 'v1.1.0', description: 'Feature updates', state: 'open' },
  { title: 'v2.0.0', description: 'Major updates', state: 'open' },
  { title: 'Sprint 1', description: 'First development sprint', state: 'open' },
  { title: 'Sprint 2', description: 'Second development sprint', state: 'open' }
];

async function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function showHelp() {
  console.log('üöÄ GitHub Repository Setup Script');
  console.log('================================\n');
  console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:');
  console.log('  node scripts/setup-github.js [--token TOKEN] [--repo OWNER/REPO]');
  console.log('  npm run setup:github [-- --token TOKEN] [--repo OWNER/REPO]');
  console.log('\n–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:');
  console.log('  --token TOKEN     GitHub Personal Access Token');
  console.log('  --repo OWNER/REPO Repository (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: akoulu/economic-dashboard)');
  console.log('  --help           –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É');
  console.log('\n–ü—Ä–∏–∫–ª–∞–¥–∏:');
  console.log('  node scripts/setup-github.js --token ghp_xxx --repo akoulu/economic-dashboard');
  console.log('  npm run setup:github -- --token ghp_xxx --repo akoulu/economic-dashboard');
}

async function setupGitHub() {
  // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
  const args = process.argv.slice(2);
  let token = null;
  let repoInput = null;

  for (let i = 0; i < args.length; i++) {
    if (args[i] === '--help' || args[i] === '-h') {
      showHelp();
      return;
    } else if (args[i] === '--token') {
      token = args[i + 1];
      i++;
    } else if (args[i] === '--repo') {
      repoInput = args[i + 1];
      i++;
    }
  }

  console.log('üöÄ GitHub Repository Setup Script');
  console.log('================================\n');

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
  if (!token) {
    token = await question('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à GitHub Personal Access Token: ');
  }
  if (!token) {
    console.error('‚ùå –¢–æ–∫–µ–Ω –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π!');
    process.exit(1);
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
  if (!repoInput) {
    repoInput = await question('–í–≤–µ–¥—ñ—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π (—Ñ–æ—Ä–º–∞—Ç: owner/repo): ');
  }
  if (!repoInput || !repoInput.includes('/')) {
    console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: owner/repo');
    process.exit(1);
  }

  const [owner, repo] = repoInput.split('/');

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Octokit –∫–ª—ñ—î–Ω—Ç–∞
  const octokit = new Octokit({
    auth: token
  });

  try {
    console.log('\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é...');
    await octokit.repos.get({ owner, repo });
    console.log('‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ!\n');

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Ç–æ–∫
    console.log('üè∑Ô∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Ç–æ–∫...');
    for (const label of labels) {
      try {
        await octokit.issues.createLabel({
          owner,
          repo,
          name: label.name,
          color: label.color,
          description: label.description
        });
        console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –º—ñ—Ç–∫—É: ${label.name}`);
      } catch (error) {
        if (error.status === 422) {
          console.log(`‚ö†Ô∏è  –ú—ñ—Ç–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î: ${label.name}`);
        } else {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Ç–∫–∏ ${label.name}:`, error.message);
        }
      }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è milestones
    console.log('\nüéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è milestones...');
    for (const milestone of milestones) {
      try {
        await octokit.issues.createMilestone({
          owner,
          repo,
          title: milestone.title,
          description: milestone.description,
          state: milestone.state
        });
        console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ milestone: ${milestone.title}`);
      } catch (error) {
        if (error.status === 422) {
          console.log(`‚ö†Ô∏è  Milestone –≤–∂–µ —ñ—Å–Ω—É—î: ${milestone.title}`);
        } else {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è milestone ${milestone.title}:`, error.message);
        }
      }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö issues
    console.log('\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö issues...');
    
    const sampleIssues = [
      {
        title: '[FEATURE] Add GDP Chart Component',
        body: `## Feature Description
Add interactive GDP chart component using AG Charts.

## Acceptance Criteria
- [ ] Chart displays GDP data for RU, CN, IN, US (2014-2025)
- [ ] Support for zooming and tooltips
- [ ] Export functionality to PNG
- [ ] WCAG 2.1 compliance
- [ ] Unit test coverage >80%

## Technical Requirements
- Component: GdpChartComponent
- Dependencies: AG Charts, Angular Material
- Data Format: JSON

## Priority
- [x] High

## Role Assignment
- [x] Developer (implementation)

## Milestone
- [x] v1.0.0`,
        labels: ['feature', 'priority:high', 'role:developer', 'component:gdp', 'ui/ux']
      },
      {
        title: '[BUG] Fix API error handling',
        body: `## Bug Description
API errors are not properly handled in the dashboard.

## Steps to Reproduce
1. Disconnect internet
2. Try to load dashboard data
3. See unhandled error

## Expected Behavior
Show user-friendly error message with retry option.

## Actual Behavior
Application crashes with technical error.

## Environment
- Browser: Chrome
- Version: Latest
- OS: Windows

## Acceptance Criteria
- [ ] Graceful error handling
- [ ] User-friendly error messages
- [ ] Retry functionality
- [ ] Error logging

## Priority
- [x] High

## Role Assignment
- [x] Developer (code fix)`,
        labels: ['bug', 'priority:high', 'role:developer', 'component:dashboard']
      },
      {
        title: '[ENHANCEMENT] Add data validation',
        body: `## Enhancement Description
Add comprehensive data validation for economic indicators.

## Problem Statement
Currently, invalid data can be displayed without warning.

## Proposed Solution
Implement validation layer with user notifications.

## Acceptance Criteria
- [ ] Validate GDP data ranges
- [ ] Check for missing data
- [ ] Show validation warnings
- [ ] Log validation errors

## Priority
- [x] Medium

## Role Assignment
- [x] Analyst (data verification)
- [x] Developer (implementation)`,
        labels: ['enhancement', 'priority:medium', 'role:analyst', 'role:developer']
      }
    ];

    for (const issue of sampleIssues) {
      try {
        await octokit.issues.create({
          owner,
          repo,
          title: issue.title,
          body: issue.body,
          labels: issue.labels
        });
        console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ issue: ${issue.title}`);
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è issue: ${error.message}`);
      }
    }

    console.log('\nüéâ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
    console.log('1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ branch protection rules –≤—Ä—É—á–Ω—É');
    console.log('2. –î–æ–¥–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–∏ –¥–ª—è CI/CD (VERCEL_TOKEN, —Ç–æ—â–æ)');
    console.log('3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ GitHub Project automation');
    console.log('4. –î–æ–¥–∞–π—Ç–µ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É CODEOWNERS');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    if (error.status === 401) {
      console.error('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É —Ç–∞ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É');
    } else if (error.status === 404) {
      console.error('–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É');
    }
  } finally {
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  setupGitHub().catch(console.error);
}

module.exports = { setupGitHub, labels, milestones }; 